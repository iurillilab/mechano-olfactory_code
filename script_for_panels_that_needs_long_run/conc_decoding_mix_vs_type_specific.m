clear; clc; close all;
[dataFilesDirList, mouseNameList, dataPathPrefixList] =....
    get_all_conc_mice('beast1');
%% set paramiters
[tBeginning, tEnd, trialsToRemove]=...
    get_removal_variables();

lowConc = 1;
highConc = 2;


%%
numOfPerm = 100;
num_cv_splits = 10;
numOfResample = 100;
the_feature_preprocessors{1} =...
    zscore_normalize_FP;
the_classifier = libsvm_CL;
%%
saveDir = fullfile(EPS_figPath('beast1'),...
    'fig1_panleP_data_auROC_svmAcc_typeSpesefic_vs_mix');
if ~exist(saveDir , 'dir')
   mkdir(saveDir)
end
%%
for mn = 1 : length(mouseNameList)
    %%
    mouseName = mouseNameList{mn};
    dataPathPrefix = dataPathPrefixList{mn};
    mouseDirName = fullfile(dataPathPrefix,'processedDataStorage',...
        mouseName);
    load(fullfile(mouseDirName,...
        sprintf('\\%s_respData.mat', mouseName)));
    load(fullfile(mouseDirName,...
        sprintf('\\%s_respLabelsData.mat', mouseName)));
    load(fullfile(mouseDirName,...
        sprintf('\\%s_inh_NR.mat', mouseName)));
    load(fullfile(mouseDirName,...
        sprintf('\\%s_recordingData.mat', mouseName)));
    load(fullfile(mouseDirName,...
        sprintf('\\%s_odorStatistics_wholeStimulus.mat', mouseNameList{mn})))
    %% get OCtx good neurons
    goodAndSafe_unitsFlag =...
        get_goodAndSafe_units(dataPathPrefix, mouseName,...
        6, .5);
    goodAndSafe_unitsId = find(goodAndSafe_unitsFlag);
    %%
    neuron_discriminability_index_Rtytpe = [];
    neuron_discriminability_index_Stytpe = [];
    neuron_discriminability_index_MixTytpe = [];
    
    neuron_svm_acc_index_Rtytpe = [];
    neuron_svm_acc_index_Stytpe = [];
    neuron_svm_acc_index_MixTytpe = [];
    %%
    avg_fr = inh_NR.after_sc/inh_NR.cacheInfo.windSizeSec;
    for odorId = 1 : max(respData.xpeakOdorId)
        sortedUnis =...
            find((sum(odorStatistics_wholeStimulus.graterTestResult(...
            :, odorId, [lowConc, highConc]),[2,3]) >=1) &...
            goodAndSafe_unitsFlag);
        
        auR_Rtype = nan(numOfPerm, length(sortedUnis));
        auR_Stype = nan(numOfPerm, length(sortedUnis));
        auR_mixType = nan(numOfPerm, length(sortedUnis));
        
        acc_Rtype = nan(numOfPerm, length(sortedUnis));
        acc_Stype = nan(numOfPerm, length(sortedUnis));
        acc_mixType = nan(numOfPerm, length(sortedUnis));
        
        parfor perm = 1 : numOfPerm
            [fSpaceCell, fSpaceLbelsCell] =...
                get_aSample(dataPathPrefix, {mouseName},...
                [lowConc, highConc], odorId,...
                tBeginning, tEnd, trialsToRemove,...
                1, -1, -1, .5);
            respMat = fSpaceCell{1};
            labelsSetStract = fSpaceLbelsCell{1};
            
            auR_Rtype_eachPerm = nan(1, length(sortedUnis));
            auR_Stype_eachPerm = nan(1, length(sortedUnis));
            auR_mixType_eachPerm = nan(1, length(sortedUnis));
            acc_Rtype_eachPerm = nan(1, length(sortedUnis));
            acc_Stype_eachPerm = nan(1, length(sortedUnis));
            acc_mixType_eachPerm = nan(1, length(sortedUnis));
            
            for nIdx = 1 : length(sortedUnis) 
                ni = sortedUnis(nIdx);
                Rtype_lowConc_resp = respMat(...
                   labelsSetStract.RespLabel == 2 &...
                   labelsSetStract.OdorId == odorId &...
                   labelsSetStract.ConcId == lowConc, ni);
                Rtype_highConc_resp = respMat(...
                   labelsSetStract.RespLabel == 2 &...
                   labelsSetStract.OdorId == odorId &...
                   labelsSetStract.ConcId == highConc, ni);
               
                Stype_lowConc_resp = respMat(...
                   labelsSetStract.RespLabel == 1 &...
                   labelsSetStract.OdorId == odorId &...
                   labelsSetStract.ConcId == lowConc, ni);
                Stype_highConc_resp = respMat(...
                   labelsSetStract.RespLabel == 1 &...
                   labelsSetStract.OdorId == odorId &...
                   labelsSetStract.ConcId == highConc, ni);
               
                MixType_lowConc_resp = respMat(...
                   labelsSetStract.OdorId == odorId &...
                   labelsSetStract.ConcId == lowConc, ni);
                MixType_highConc_resp = respMat(...
                   labelsSetStract.OdorId == odorId &...
                   labelsSetStract.ConcId == highConc, ni);
               
               [auR_Rtype_eachPerm(nIdx), ~] =...
                   findAuROC(Rtype_lowConc_resp,...
                   Rtype_highConc_resp, 0, []); 
               
               [auR_Stype_eachPerm(nIdx), ~] =...
                   findAuROC(Stype_lowConc_resp,...
                   Stype_highConc_resp, 0, []);  

               [auR_mixType_eachPerm(nIdx), ~] =...
                   findAuROC(MixType_lowConc_resp,...
                   MixType_highConc_resp, 0, []); 
               %---
                Rtype_resp = respMat(...
                   labelsSetStract.RespLabel == 2 &...
                   labelsSetStract.OdorId == odorId, ni);              
                Stype_resp = respMat(...
                   labelsSetStract.RespLabel == 1 &...
                   labelsSetStract.OdorId == odorId, ni);
                MixType_resp = respMat(...
                   labelsSetStract.OdorId == odorId, ni);
                
                Rtype_labels = labelsSetStract.ConcId(...
                   labelsSetStract.RespLabel == 2 &...
                   labelsSetStract.OdorId == odorId);              
                Stype_labels = labelsSetStract.ConcId(...
                   labelsSetStract.RespLabel == 1 &...
                   labelsSetStract.OdorId == odorId);
                MixType_labels = labelsSetStract.ConcId(...
                   labelsSetStract.OdorId == odorId);
               
                DS_R = get_ndt_basicDs(Rtype_resp, Rtype_labels,...
                    num_cv_splits);
                DS_S = get_ndt_basicDs(Stype_resp, Stype_labels,...
                    num_cv_splits);
                DS_mix = get_ndt_basicDs(MixType_resp, MixType_labels,...
                    num_cv_splits);
                
                
                %--------
                the_cross_validator_Mix =...
                standard_resample_CV(DS_mix, the_classifier, the_feature_preprocessors);
                the_cross_validator_Mix.num_resample_runs = numOfResample;
                the_cross_validator_Mix.display_progress.resample_run_time = 0;
                the_cross_validator_Mix.display_progress.zero_one_loss = 0;
                the_cross_validator_Mix.test_only_at_training_times = 1;
                DECODING_RESULTS_Mix = the_cross_validator_Mix.run_cv_decoding;
                acc_mixType_eachPerm(nIdx) =...
                    mean(DECODING_RESULTS_Mix.ZERO_ONE_LOSS_RESULTS.decoding_results,'all')*100;
                
                the_cross_validator_S =...
                standard_resample_CV(DS_S, the_classifier, the_feature_preprocessors);
                the_cross_validator_S.num_resample_runs = numOfResample;
                the_cross_validator_S.display_progress.resample_run_time = 0;
                the_cross_validator_S.display_progress.zero_one_loss = 0;
                the_cross_validator_S.test_only_at_training_times = 1;
                DECODING_RESULTS_s = the_cross_validator_S.run_cv_decoding;
                acc_Stype_eachPerm(nIdx) =...
                    mean(DECODING_RESULTS_s.ZERO_ONE_LOSS_RESULTS.decoding_results,'all')*100;

                the_cross_validator_R =...
                    standard_resample_CV(DS_R, the_classifier, the_feature_preprocessors);
                the_cross_validator_R.num_resample_runs = numOfResample;
                the_cross_validator_R.display_progress.resample_run_time = 0;
                the_cross_validator_R.display_progress.zero_one_loss = 0;
                the_cross_validator_R.test_only_at_training_times = 1;
                DECODING_RESULTS_R = the_cross_validator_R.run_cv_decoding;
                acc_Rtype_eachPerm(nIdx)=...
                    mean(DECODING_RESULTS_R.ZERO_ONE_LOSS_RESULTS.decoding_results,'all')*100;
               
            end
            auR_Rtype(perm, :) = auR_Rtype_eachPerm;
            auR_Stype(perm, :) = auR_Stype_eachPerm;
            auR_mixType(perm, :) = auR_mixType_eachPerm;
            
            acc_Rtype(perm, :) = acc_Rtype_eachPerm;
            acc_Stype(perm, :) = acc_Stype_eachPerm;
            acc_mixType(perm, :) = acc_mixType_eachPerm;
        end
       %%
       neuron_discriminability_index_Rtytpe =...
           [neuron_discriminability_index_Rtytpe,...
           abs(2*nanmean(auR_Rtype) - 1)];
       neuron_discriminability_index_Stytpe =...
           [neuron_discriminability_index_Stytpe,...
           abs(2*nanmean(auR_Stype) - 1)];
       neuron_discriminability_index_MixTytpe =...
           [neuron_discriminability_index_MixTytpe,...
           abs(2*nanmean(auR_mixType) - 1)];
       
       neuron_svm_acc_index_Rtytpe = [neuron_svm_acc_index_Rtytpe,...
           mean(acc_Rtype)];
       neuron_svm_acc_index_Stytpe = [neuron_svm_acc_index_Stytpe,....
           mean(acc_Stype)];
       neuron_svm_acc_index_MixTytpe = [neuron_svm_acc_index_MixTytpe,...
           mean(acc_mixType)];
       %% 
%        pooled_Rtype_auROC_pVal = [pooled_Rtype_auROC_pVal;...
%            auR_Rtype_pval];
%        pooled_Stype_auROC_pVal = [pooled_Stype_auROC_pVal;...
%            auR_Stype_pVal];
%        pooled_mixType_auROC_pVal = [pooled_mixType_auROC_pVal;...
%            auR_mixType_pVal];

    end
   %%
   save(fullfile(saveDir, mouseName),...
       'neuron_discriminability_index_Rtytpe',...
       'neuron_discriminability_index_MixTytpe',...
       'neuron_discriminability_index_Stytpe',...
       'neuron_svm_acc_index_MixTytpe',...
       'neuron_svm_acc_index_Rtytpe',...
       'neuron_svm_acc_index_Stytpe',...
       '-v7.3')
end
%%
