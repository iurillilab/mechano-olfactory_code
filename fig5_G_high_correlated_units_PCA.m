clear; clc; close all;
%%
dataFilesDirList = {'M1\102721', 'M2\102821','M3\102921',...
    'M5\120221'};
mouseNameList = {'M1_102721', 'M2_102821','M3_102921',...
    'M5_120221'};
%  dataPathPrefix = 'E:\Ephys\Conc_Series';
%  dataPathPrefix = 'D:\Reza\sniffOdorProject\Conc_Series';
  dataPathPrefix = 'D:\sniffOdorProject\Conc_Series';
%%
[tBeginning, tEnd, trialsToRemove]=...
    get_removal_variables();
add_ndt_paths_and_init_rand_generator
conc_set = [1,2,4];
%%
linearity_Coeff_poold = [];
linearity_pVal_poold = [];
nonlinearity_Coeff_poold = [];
nonlinearity_pVal_poold = [];
%%
for mn = 1 : length(mouseNameList)
    %%
    mouseName = mouseNameList{mn};
    mouseDirName = fullfile(dataPathPrefix,'processedDataStorage',...
        mouseName);
    load(fullfile(mouseDirName,...
            sprintf('\\%s_lrModel_zscored_no_baseline.mat', mouseName)));
    goodAndSafe_unitsFlag =...
            get_goodAndSafe_units(dataPathPrefix, mouseName,...
            6, .5);
   %%
   linearity_Coeff_poold =...
       [linearity_Coeff_poold,...
       nanmean(lrModel.linearlity_model_coeff(...
       :, goodAndSafe_unitsFlag,:, :), 4)];
   linearity_pVal_poold =...
       [linearity_pVal_poold,...
       nanmean(lrModel.linearlity_model_pVal(...
       :, goodAndSafe_unitsFlag,:, :), 4)];
   
   nonlinearity_Coeff_poold = ...
       [nonlinearity_Coeff_poold,...
       nanmean(lrModel.nonlinearlity_model_coeff(...
       :, goodAndSafe_unitsFlag,:, :), 4)];
   nonlinearity_pVal_poold =...
       [nonlinearity_pVal_poold,...
       nanmean(lrModel.nonlinearlity_model_pVal(...
       :, goodAndSafe_unitsFlag,:, :), 4)];
   
end
%%
[colorSet, SandR_colors] = set_plot_seting(17, 8);
pltDir = fullfile(final_figs_path('uniTn1'),...
    'fig5_G-samesize_sample');
if ~exist(pltDir , 'dir')
   mkdir(pltDir)
end
%%
pVal = .01;
constantFactor = squeeze(linearity_Coeff_poold(1,:, :));
sigGamma = squeeze(nonlinearity_pVal_poold(1, :, :)) <= pVal;
sigAlpha = squeeze(linearity_pVal_poold(2, :, :)) <= pVal;
sigBeta = squeeze(linearity_pVal_poold(3, :, :)) <= pVal;
alpha = squeeze(linearity_Coeff_poold(2,:, :));
beta = squeeze(linearity_Coeff_poold(3,:, :));
gamma = squeeze(nonlinearity_Coeff_poold(1,:, :));
%%
angleRange = deg2rad(30);
%% -
unitIdsCell = cell(3,max(fSpaceLbels.OdorId ) );

 for oId = 1 : max(fSpaceLbels.OdorId ) 
    controlSelection =...
        find((abs(beta(:, oId)) <= abs(alpha(:, oId)*tan(pi/4+angleRange))) &...
        (abs(beta(:, oId)) >= abs(alpha(:, oId)*(pi/4-angleRange))));

    selectedUnits_neg_corr =...
        find((abs(beta(:, oId)) <= abs(alpha(:, oId)*tan(pi/4+angleRange))) &...
        (abs(beta(:, oId)) >= abs(alpha(:, oId)*(pi/4-angleRange))) &...
        (sign(alpha(:, oId)) ~= sign(beta(:, oId))));

    selectedUnits_pos_corr =...
        find((abs(beta(:, oId)) <= abs(alpha(:, oId)*tan(pi/4+angleRange))) &...
        (abs(beta(:, oId)) >= abs(alpha(:, oId)*(pi/4-angleRange))) &...
        (sign(alpha(:, oId)) == sign(beta(:, oId))));

    min_unit_size = min([length(selectedUnits_neg_corr),...
        length(selectedUnits_pos_corr)]);


    unitIdsCell{1, oId} = sort(selectedUnits_neg_corr(...
        randperm(size(selectedUnits_neg_corr,1),...
        min_unit_size)));                  
    unitIdsCell{2, oId} = sort(selectedUnits_pos_corr(...
        randperm(size(selectedUnits_pos_corr,1),...
        min_unit_size)));       
    unitIdsCell{3, oId} = sort(controlSelection(...
        randperm(size(controlSelection,1),...
        min_unit_size)));
 end
 %%
 
[fSpaceCell, fSpaceLbelsCell] =...
    get_aSample(dataPathPrefix, mouseNameList,....
                conc_set, 1:2, tBeginning, tEnd,trialsToRemove,...
                2.5, 1, 6, .5);
pseudoPopulation =...
        [fSpaceCell{1}, fSpaceCell{2},fSpaceCell{3}, fSpaceCell{4}];
fSpaceLbels = fSpaceLbelsCell{1};

xLim = [-2,2];
yLim = xLim;
markerSize_coeff = 25;
transparancyAlfa = .3;
dotFaceColor = .4*[1,1,1];
dotEdgeColor = .1*[1,1,1];

xLim_PCA = [-12,12];
yLim_PCA = [-5,8];
markerSize = 20;
markerFaceAlpha = [.3,.6,0,.9];
markerEdgeAlpha = [.3,.6,0,.9];


for sc = 1 : 3
    for oId = 1 : max(fSpaceLbels.OdorId )         
        switch sc
            case 1
                selectedUnits_pos_corr =...
                    unitIdsCell{2, oId};
                [coeff,score,latent] =...
                    pca(zscore(pseudoPopulation(:, selectedUnits_pos_corr)));
            case 2
                selectedUnits_pos_corr =...
                    unitIdsCell{1, oId};
                [coeff,score,latent] =...
                    pca(zscore(pseudoPopulation(:, selectedUnits_pos_corr)));
            case 3
                selectedUnits_pos_corr =...
                    unitIdsCell{3, oId};
                [coeff,score,latent] =...
                    pca(zscore(pseudoPopulation(:, selectedUnits_pos_corr)));
        end                
        %%
        close all; figure, hold on
        plot([0,0], xLim, 'k:')
        plot( xLim, [0,0], 'k:')
        scatter(alpha(:, oId),...
            beta(:, oId),...
            markerSize_coeff,...
            'MarkerEdgeColor', dotEdgeColor,...
            'MarkerFaceColor', [1,1,1], 'MarkerFaceAlpha', transparancyAlfa);
        scatter(alpha(selectedUnits_pos_corr, oId),...
            beta(selectedUnits_pos_corr, oId),...
            markerSize_coeff,...
            'MarkerEdgeColor', colorSet(sc,:),...
            'MarkerFaceColor', colorSet(sc,:), 'MarkerFaceAlpha', transparancyAlfa);
        ylim(yLim)
        xlim(xLim)
        title({'Regularized linear model coefficients', 'All odor/unit pairs',''})
        ylabel('concentration regressor')
        xlabel('inhalation type regressor')
        title({sprintf('Odor%d - lr model',...
            oId), ''})
        grid on
        axis square
        set(gcf,'Position',[200,200,400,500])
        switch sc
            case 1
             print_it(pltDir, sprintf('od%d_alphaVsBetta_positively_correlated', oId),...
                'pooled')
            case 2
                print_it(pltDir, sprintf('od%d_alphaVsBetta_negatively_correlated', oId),...
                'pooled')
            case 3
                print_it(pltDir, sprintf('od%d_alphaVsBetta_not_correlated', oId),...
                'pooled')
        end
        %%
        f1 = figure;
        hold on 
        for ci = conc_set
            scatter((score( fSpaceLbels.RespLabel == 2 &...
                fSpaceLbels.ConcId == ci & fSpaceLbels.OdorId == oId , 1)),...
                 (score(fSpaceLbels.RespLabel ==2 &...
                 fSpaceLbels.ConcId== ci & fSpaceLbels.OdorId == oId, 2)),...
                 markerSize, 'MarkerEdgeColor',SandR_colors.r,...
                 'MarkerFaceColor',SandR_colors.r,...
                'MarkerFaceAlpha',markerFaceAlpha(ci),...
                'MarkerEdgeAlpha',markerEdgeAlpha(ci));
            scatter((score( fSpaceLbels.RespLabel == 1 &...
                fSpaceLbels.ConcId == ci & fSpaceLbels.OdorId == oId , 1)),...
                 (score(fSpaceLbels.RespLabel == 1 &...
                 fSpaceLbels.ConcId== ci & fSpaceLbels.OdorId == oId, 2)),...
                 markerSize, 'MarkerEdgeColor',SandR_colors.s,...
                 'MarkerFaceColor',SandR_colors.s,...
                'MarkerFaceAlpha',markerFaceAlpha(ci),...
                'MarkerEdgeAlpha',markerEdgeAlpha(ci));
        end
        set(gca,'LineWidth',2)
        xlabel('PC 1'); ylabel('PC 2');
        box off 
        switch sc
            case 1
                xlim(xLim_PCA); ylim(yLim_PCA)       
                 title({sprintf('odor %d - pseudo population',oId),...
                    'positively correlated'})
                set(gcf,'Position',[50,50,450,300]);
                print_it(pltDir, sprintf('odor%d_2D_PCA_positively_correlated',oId), 'pseudoPopulation')
            case 2
                xlim(xLim_PCA); ylim(yLim_PCA) 
                title({sprintf('odor %d - pseudo population',oId),...
                    'negatively correlated'})
                set(gcf,'Position',[50,50,450,300]);
                print_it(pltDir, sprintf('odor%d_2D_PCA_negatively_correlated',oId), 'pseudoPopulation')
            case 3
                xlim(xLim_PCA); ylim(xLim_PCA) 
                title({sprintf('odor %d - pseudo population',oId),...
                    'not correlated'})
                set(gcf,'Position',[50,50,450,450]);
                print_it(pltDir, sprintf('odor%d_2D_PCA_not_correlated',oId), 'pseudoPopulation')
        end
        %%
    end
end
